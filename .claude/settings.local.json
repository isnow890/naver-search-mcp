{
  "permissions": {
    "allow": [
      "mcp__sequential-thinking-mac__sequentialthinking",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(npm run build:*)",
      "Bash(git checkout:*)",
      "Bash(npm install)",
      "Bash(node:*)",
      "Bash(NAVER_CLIENT_ID=test_id NAVER_CLIENT_SECRET=test_secret node dist/src/index.js)",
      "Bash(docker build:*)",
      "Bash(rm:*)",
      "Bash(NAVER_CLIENT_ID=test_id NAVER_CLIENT_SECRET=test_secret node -e \"\nconst { inspect } = require(''util'');\n\n// 테스트 데이터 (당신이 받은 응답과 유사)\nconst testData = {\n  ''title'': ''\\uc5d1\\uc2a4\\ud50c\\ub77c, AI-\\ube14\\ub85d\\uccb4\\uc778 \\uc5f0\\uacb0 MCP \\uacf5\\uac1c'',\n  ''description'': ''MCP\\ub294 AI \\ubaa8\\ub378\\uc774 \\uc678\\ubd80 \\ub370\\uc774\\ud130 \\uc18c\\uc2a4''\n};\n\nconsole.log(''=== JSON.stringify ==='');\nconsole.log(JSON.stringify(testData, null, 2));\n\nconsole.log(''\\n=== util.inspect ==='');\nconsole.log(inspect(testData, { depth: null, colors: false, compact: false }));\n\nconsole.log(''\\n=== Custom decode ==='');\nfunction decodeUnicode(str) {\n  return str.replace(/\\\\u[0-9a-fA-F]{4}/g, function(match) {\n    return String.fromCharCode(parseInt(match.replace(/\\\\u/, ''''), 16));\n  });\n}\nconsole.log(decodeUnicode(JSON.stringify(testData, null, 2)));\n\")",
      "Bash(NAVER_CLIENT_ID=test_id NAVER_CLIENT_SECRET=test_secret node -e \"\nconst fastMCP = require(''./dist/src/index.js'');\n\n// 실제 Naver API 응답과 유사한 문자열 데이터\nconst testString = ''{\"\"title\"\":\"\"\\uc5d1\\uc2a4\\ud50c\\ub77c, AI-\\ube14\\ub85d\\uccb4\\uc778 \\uc5f0\\uacb0 MCP \\uacf5\\uac1c\"\"}'';\n\nconsole.log(''=== Raw string ==='');\nconsole.log(testString);\n\nconsole.log(''\\n=== Parsed JSON ==='');\nconst parsed = JSON.parse(testString);\nconsole.log(JSON.stringify(parsed, null, 2));\n\nconsole.log(''\\n=== 유니코드 디코딩 함수 테스트 ==='');\nfunction decodeUnicodeInObject(obj) {\n    if (typeof obj === ''string'') {\n        return obj.replace(/\\\\u[\\dA-F]{4}/gi, (match) => {\n            return String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''''), 16));\n        });\n    } else if (Array.isArray(obj)) {\n        return obj.map(decodeUnicodeInObject);\n    } else if (obj !== null && typeof obj === ''object'') {\n        const decoded = {};\n        for (const [key, value] of Object.entries(obj)) {\n            decoded[decodeUnicodeInObject(key)] = decodeUnicodeInObject(value);\n        }\n        return decoded;\n    }\n    return obj;\n}\n\nconst decoded = decodeUnicodeInObject(parsed);\nconsole.log(JSON.stringify(decoded, null, 2));\n\")",
      "Bash(mkdir:*)"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "context7",
    "sequential-thinking",
    "sequential-thinking-mac",
    "playwright",
    "playwright-mac",
    "book-information-mcp",
    "book-information-mcp-mac"
  ]
}